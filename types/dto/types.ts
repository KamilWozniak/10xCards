import type { Tables, TablesInsert } from '../database/database.types'

// ============================================================================
// COMMON / SHARED DTOs
// ============================================================================

/**
 * Pagination metadata for list responses
 */
export interface PaginationMetaDTO {
  page: number
  limit: number
  total: number
}

/**
 * Generic success message response
 */
export interface ApiSuccessMessageDTO {
  message: string
}

/**
 * Generic error response
 */
export interface ApiErrorResponseDTO {
  error: string
  details?: string
}

// ============================================================================
// FLASHCARDS DTOs
// ============================================================================

/**
 * Source type for flashcards as defined in API validation rules
 */
export type FlashcardSource = 'ai-full' | 'ai-edited' | 'manual'

/**
 * Base flashcard DTO derived from database entity
 * Used for responses when returning flashcard data
 */
export type FlashcardDTO = Tables<'flashcards'>

/**
 * Flashcard data without system-generated fields
 * Used as base for creation requests
 */
export type FlashcardCreateData = Omit<
  TablesInsert<'flashcards'>,
  'id' | 'created_at' | 'updated_at' | 'user_id'
>

/**
 * DTO for creating a single flashcard
 * Validates: front (max 200), back (max 500), source enum, generation_id rules
 */
export interface CreateFlashcardDTO {
  front: string // max 200 characters
  back: string // max 500 characters
  source: FlashcardSource
  generation_id?: number | null // Required for ai-full/ai-edited, must be null for manual
}

/**
 * Request DTO for POST /flashcards
 * Accepts an array of flashcards to create
 */
export interface CreateFlashcardsRequestDTO {
  flashcards: CreateFlashcardDTO[]
}

/**
 * Response DTO for POST /flashcards
 * Returns the created flashcards with generated IDs
 */
export interface CreateFlashcardsResponseDTO {
  flashcards: FlashcardDTO[]
}

/**
 * DTO for updating a flashcard (PUT /flashcards/{id})
 * All fields are optional for partial updates
 */
export type UpdateFlashcardDTO = Partial<Pick<FlashcardDTO, 'front' | 'back' | 'source'>>

/**
 * Query parameters for GET /flashcards
 * Supports pagination, sorting, and filtering
 */
export interface FlashcardListQueryDTO {
  page?: number // default: 1
  limit?: number // default: 10
  sort?: keyof FlashcardDTO // e.g., 'created_at'
  order?: 'asc' | 'desc'
  source?: FlashcardSource // optional filter
  generation_id?: number // optional filter
}

/**
 * Response DTO for GET /flashcards
 * Returns paginated list of flashcards
 */
export interface PaginatedFlashcardsResponseDTO {
  data: FlashcardDTO[]
  pagination: PaginationMetaDTO
}

// ============================================================================
// GENERATIONS DTOs
// ============================================================================

/**
 * Base generation DTO derived from database entity
 * Used for responses when returning generation data
 */
export type GenerationDTO = Tables<'generations'>

/**
 * Request DTO for POST /generations
 * Initiates AI flashcard generation from source text
 */
export interface CreateGenerationRequestDTO {
  source_text: string // Must be 1000-10000 characters
}

/**
 * Flashcard proposal generated by AI (not yet saved)
 * Used in generation response before user accepts/rejects
 */
export interface FlashcardProposalDTO {
  front: string
  back: string
  source: Extract<FlashcardSource, 'ai-full'> // Always 'ai-full' for proposals
}

/**
 * Response DTO for POST /generations
 * Returns generation metadata and AI-generated flashcard proposals
 */
export interface CreateGenerationResponseDTO {
  generation_id: number
  flashcards_proposals: FlashcardProposalDTO[]
  generated_count: number
}

/**
 * Query parameters for GET /generations
 * Supports pagination
 */
export interface GenerationListQueryDTO {
  page?: number // default: 1
  limit?: number // default: 10
}

/**
 * Response DTO for GET /generations
 * Returns paginated list of generations
 */
export interface PaginatedGenerationsResponseDTO {
  data: GenerationDTO[]
  pagination: PaginationMetaDTO
}

/**
 * Response DTO for GET /generations/{id}
 * Returns generation details with associated accepted flashcards
 */
export interface GenerationDetailResponseDTO {
  generation: GenerationDTO
  flashcards: FlashcardDTO[]
}

// ============================================================================
// GENERATION ERROR LOGS DTOs
// ============================================================================

/**
 * Base generation error log DTO derived from database entity
 * Used for admin/debugging purposes
 */
export type GenerationErrorLogDTO = Tables<'generation_error_logs'>

/**
 * Response DTO for GET /generation-error-logs
 * Returns list of error logs (typically for admin users)
 */
export interface GenerationErrorLogsResponseDTO {
  data: GenerationErrorLogDTO[]
}
